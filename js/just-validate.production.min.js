"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e11) { throw _e11; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e12) { didErr = true; err = _e12; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
var __defProp = Object.defineProperty,
  __defNormalProp = function __defNormalProp(e, i, t) {
    return i in e ? __defProp(e, i, {
      enumerable: !0,
      configurable: !0,
      writable: !0,
      value: t
    }) : e[i] = t;
  },
  __publicField = function __publicField(e, i, t) {
    return __defNormalProp(e, "symbol" != _typeof(i) ? i + "" : i, t), t;
  };
!function (e, i) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (e = "undefined" != typeof globalThis ? globalThis : e || self).JustValidate = i();
}(void 0, function () {
  "use strict";

  var e = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    i = /^-?[0-9]\d*$/,
    t = /^(?=.*[A-Za-z])(?=.*\d).{8,}$/,
    s = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/,
    l = function l(e) {
      return "string" != typeof e || "" === e;
    };
  var r = function (e) {
      return e.Required = "required", e.Email = "email", e.MinLength = "minLength", e.MaxLength = "maxLength", e.Password = "password", e.Number = "number", e.Integer = "integer", e.MaxNumber = "maxNumber", e.MinNumber = "minNumber", e.StrongPassword = "strongPassword", e.CustomRegexp = "customRegexp", e.MinFilesCount = "minFilesCount", e.MaxFilesCount = "maxFilesCount", e.Files = "files", e;
    }(r || {}),
    o = function (e) {
      return e.Required = "required", e;
    }(o || {}),
    a = function (e) {
      return e.Label = "label", e.LabelArrow = "labelArrow", e;
    }(a || {});
  var n = [{
      key: r.Required,
      dict: {
        en: "The field is required"
      }
    }, {
      key: r.Email,
      dict: {
        en: "Email has invalid format"
      }
    }, {
      key: r.MaxLength,
      dict: {
        en: "The field must contain a maximum of :value characters"
      }
    }, {
      key: r.MinLength,
      dict: {
        en: "The field must contain a minimum of :value characters"
      }
    }, {
      key: r.Password,
      dict: {
        en: "Password must contain minimum eight characters, at least one letter and one number"
      }
    }, {
      key: r.StrongPassword,
      dict: {
        en: "Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character"
      }
    }, {
      key: r.Number,
      dict: {
        en: "Value should be a number"
      }
    }, {
      key: r.MaxNumber,
      dict: {
        en: "Number should be less or equal than :value"
      }
    }, {
      key: r.MinNumber,
      dict: {
        en: "Number should be more or equal than :value"
      }
    }, {
      key: r.MinFilesCount,
      dict: {
        en: "Files count should be more or equal than :value"
      }
    }, {
      key: r.MaxFilesCount,
      dict: {
        en: "Files count should be less or equal than :value"
      }
    }, {
      key: r.Files,
      dict: {
        en: "Uploaded files have one or several invalid properties (extension/size/type etc)."
      }
    }],
    d = function d(e) {
      return "object" == _typeof(e) && null !== e && "then" in e && "function" == typeof e.then;
    },
    c = function c(e) {
      return Array.isArray(e) ? e.filter(function (e) {
        return e.length > 0;
      }) : "string" == typeof e && e.trim() ? _toConsumableArray(e.split(" ").filter(function (e) {
        return e.length > 0;
      })) : [];
    },
    u = function u(e) {
      return e instanceof Element || e instanceof HTMLDocument;
    },
    h = {
      errorFieldStyle: {
        color: "#b81111",
        border: "1px solid #B81111"
      },
      errorFieldCssClass: "just-validate-error-field",
      successFieldCssClass: "just-validate-success-field",
      errorLabelStyle: {
        color: "#b81111"
      },
      errorLabelCssClass: "just-validate-error-label",
      successLabelCssClass: "just-validate-success-label",
      focusInvalidField: !0,
      lockForm: !0,
      testingMode: !1,
      validateBeforeSubmitting: !1
    };
  return /*#__PURE__*/function () {
    function _class(e, i, t) {
      var _this = this;
      _classCallCheck(this, _class);
      __publicField(this, "form", null), __publicField(this, "fields", {}), __publicField(this, "groupFields", {}), __publicField(this, "errors", {}), __publicField(this, "isValid", !1), __publicField(this, "isSubmitted", !1), __publicField(this, "globalConfig", h), __publicField(this, "errorLabels", {}), __publicField(this, "successLabels", {}), __publicField(this, "eventListeners", []), __publicField(this, "dictLocale", n), __publicField(this, "currentLocale", "en"), __publicField(this, "customStyleTags", {}), __publicField(this, "onSuccessCallback"), __publicField(this, "onFailCallback"), __publicField(this, "onValidateCallback"), __publicField(this, "tooltips", []), __publicField(this, "lastScrollPosition"), __publicField(this, "isScrollTick"), __publicField(this, "fieldIds", new Map()), __publicField(this, "getKeyByFieldSelector", function (e) {
        return _this.fieldIds.get(e);
      }), __publicField(this, "getFieldSelectorByKey", function (e) {
        var _iterator = _createForOfIteratorHelper(_this.fieldIds),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
              _i2 = _step$value[0],
              _t = _step$value[1];
            if (e === _t) return _i2;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }), __publicField(this, "getCompatibleFields", function () {
        var e = {};
        return Object.keys(_this.fields).forEach(function (i) {
          var t = i;
          var s = _this.getFieldSelectorByKey(i);
          "string" == typeof s && (t = s), e[t] = _objectSpread({}, _this.fields[i]);
        }), e;
      }), __publicField(this, "setKeyByFieldSelector", function (e) {
        if (_this.fieldIds.has(e)) return _this.fieldIds.get(e);
        var i = String(_this.fieldIds.size + 1);
        return _this.fieldIds.set(e, i), i;
      }), __publicField(this, "refreshAllTooltips", function () {
        _this.tooltips.forEach(function (e) {
          e.refresh();
        });
      }), __publicField(this, "handleDocumentScroll", function () {
        _this.lastScrollPosition = window.scrollY, _this.isScrollTick || (window.requestAnimationFrame(function () {
          _this.refreshAllTooltips(), _this.isScrollTick = !1;
        }), _this.isScrollTick = !0);
      }), __publicField(this, "formSubmitHandler", function (e) {
        e.preventDefault(), _this.isSubmitted = !0, _this.validateHandler(e);
      }), __publicField(this, "handleFieldChange", function (e) {
        var i;
        for (var _t2 in _this.fields) {
          if (_this.fields[_t2].elem === e) {
            i = _t2;
            break;
          }
        }
        i && (_this.fields[i].touched = !0, _this.validateField(i, !0));
      }), __publicField(this, "handleGroupChange", function (e) {
        var i;
        for (var _t3 in _this.groupFields) {
          if (_this.groupFields[_t3].elems.find(function (i) {
            return i === e;
          })) {
            i = _t3;
            break;
          }
        }
        i && (_this.groupFields[i].touched = !0, _this.validateGroup(i, !0));
      }), __publicField(this, "handlerChange", function (e) {
        e.target && (_this.handleFieldChange(e.target), _this.handleGroupChange(e.target), _this.renderErrors());
      }), this.initialize(e, i, t);
    }
    _createClass(_class, [{
      key: "initialize",
      value: function initialize(e, i, t) {
        if (this.form = null, this.errors = {}, this.isValid = !1, this.isSubmitted = !1, this.globalConfig = h, this.errorLabels = {}, this.successLabels = {}, this.eventListeners = [], this.customStyleTags = {}, this.tooltips = [], this.currentLocale = "en", "string" == typeof e) {
          var _i3 = document.querySelector(e);
          if (!_i3) throw Error("Form with ".concat(e, " selector not found! Please check the form selector"));
          this.setForm(_i3);
        } else {
          if (!(e instanceof HTMLFormElement)) throw Error("Form selector is not valid. Please specify a string selector or a DOM element.");
          this.setForm(e);
        }
        if (this.globalConfig = _objectSpread(_objectSpread({}, h), i), t && (this.dictLocale = [].concat(_toConsumableArray(t), n)), this.isTooltip()) {
          var _e2 = document.createElement("style");
          _e2.textContent = ".just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}", this.customStyleTags[a.Label] = document.head.appendChild(_e2), this.addListener("scroll", document, this.handleDocumentScroll);
        }
      }
    }, {
      key: "getLocalisedString",
      value: function getLocalisedString(e, i, t) {
        var s;
        var l = null != t ? t : e;
        var o = null == (s = this.dictLocale.find(function (e) {
          return e.key === l;
        })) ? void 0 : s.dict[this.currentLocale];
        if (o || t && (o = t), o && void 0 !== i) switch (e) {
          case r.MaxLength:
          case r.MinLength:
          case r.MaxNumber:
          case r.MinNumber:
          case r.MinFilesCount:
          case r.MaxFilesCount:
            o = o.replace(":value", String(i));
        }
        return o || t || "Value is incorrect";
      }
    }, {
      key: "getFieldErrorMessage",
      value: function getFieldErrorMessage(e, i) {
        var t = "function" == typeof e.errorMessage ? e.errorMessage(this.getElemValue(i), this.fields) : e.errorMessage;
        return this.getLocalisedString(e.rule, e.value, t);
      }
    }, {
      key: "getFieldSuccessMessage",
      value: function getFieldSuccessMessage(e, i) {
        var t = "function" == typeof e ? e(this.getElemValue(i), this.fields) : e;
        return this.getLocalisedString(void 0, void 0, t);
      }
    }, {
      key: "getGroupErrorMessage",
      value: function getGroupErrorMessage(e) {
        return this.getLocalisedString(e.rule, void 0, e.errorMessage);
      }
    }, {
      key: "getGroupSuccessMessage",
      value: function getGroupSuccessMessage(e) {
        if (e.successMessage) return this.getLocalisedString(void 0, void 0, e.successMessage);
      }
    }, {
      key: "setFieldInvalid",
      value: function setFieldInvalid(e, i) {
        this.fields[e].isValid = !1, this.fields[e].errorMessage = this.getFieldErrorMessage(i, this.fields[e].elem);
      }
    }, {
      key: "setFieldValid",
      value: function setFieldValid(e, i) {
        this.fields[e].isValid = !0, void 0 !== i && (this.fields[e].successMessage = this.getFieldSuccessMessage(i, this.fields[e].elem));
      }
    }, {
      key: "setGroupInvalid",
      value: function setGroupInvalid(e, i) {
        this.groupFields[e].isValid = !1, this.groupFields[e].errorMessage = this.getGroupErrorMessage(i);
      }
    }, {
      key: "setGroupValid",
      value: function setGroupValid(e, i) {
        this.groupFields[e].isValid = !0, this.groupFields[e].successMessage = this.getGroupSuccessMessage(i);
      }
    }, {
      key: "getElemValue",
      value: function getElemValue(e) {
        switch (e.type) {
          case "checkbox":
            return e.checked;
          case "file":
            return e.files;
          default:
            return e.value;
        }
      }
    }, {
      key: "validateGroupRule",
      value: function validateGroupRule(e, i, t) {
        if (t.rule === o.Required) i.every(function (e) {
          return !e.checked;
        }) ? this.setGroupInvalid(e, t) : this.setGroupValid(e, t);
      }
    }, {
      key: "validateFieldRule",
      value: function validateFieldRule(o, a, n) {
        var _this2 = this;
        var c = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
        var u = n.value,
          h = this.getElemValue(a);
        if (n.plugin) {
          n.plugin(h, this.getCompatibleFields()) || this.setFieldInvalid(o, n);
        } else {
          switch (n.rule) {
            case r.Required:
              (function (e) {
                var i = e;
                return "string" == typeof e && (i = e.trim()), !i;
              })(h) && this.setFieldInvalid(o, n);
              break;
            case r.Email:
              if (l(h)) break;
              f = h, e.test(f) || this.setFieldInvalid(o, n);
              break;
            case r.MaxLength:
              if (void 0 === u) {
                console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(o, n);
                break;
              }
              if ("number" != typeof u) {
                console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] should be a number. The field will be always invalid.")), this.setFieldInvalid(o, n);
                break;
              }
              if (l(h)) break;
              (function (e, i) {
                return e.length > i;
              })(h, u) && this.setFieldInvalid(o, n);
              break;
            case r.MinLength:
              if (void 0 === u) {
                console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(o, n);
                break;
              }
              if ("number" != typeof u) {
                console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] should be a number. The field will be always invalid.")), this.setFieldInvalid(o, n);
                break;
              }
              if (l(h)) break;
              (function (e, i) {
                return e.length < i;
              })(h, u) && this.setFieldInvalid(o, n);
              break;
            case r.Password:
              if (l(h)) break;
              (function (e) {
                return t.test(e);
              })(h) || this.setFieldInvalid(o, n);
              break;
            case r.StrongPassword:
              if (l(h)) break;
              (function (e) {
                return s.test(e);
              })(h) || this.setFieldInvalid(o, n);
              break;
            case r.Number:
              if (l(h)) break;
              (function (e) {
                return "string" == typeof e && !isNaN(+e) && !isNaN(parseFloat(e));
              })(h) || this.setFieldInvalid(o, n);
              break;
            case r.Integer:
              if (l(h)) break;
              (function (e) {
                return i.test(e);
              })(h) || this.setFieldInvalid(o, n);
              break;
            case r.MaxNumber:
              {
                if (void 0 === u) {
                  console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(o, n);
                  break;
                }
                if ("number" != typeof u) {
                  console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(o, n);
                  break;
                }
                if (l(h)) break;
                var _e3 = +h;
                (Number.isNaN(_e3) || function (e, i) {
                  return e > i;
                }(_e3, u)) && this.setFieldInvalid(o, n);
                break;
              }
            case r.MinNumber:
              {
                if (void 0 === u) {
                  console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field is not defined. The field will be always invalid.")), this.setFieldInvalid(o, n);
                  break;
                }
                if ("number" != typeof u) {
                  console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(o, n);
                  break;
                }
                if (l(h)) break;
                var _e4 = +h;
                (Number.isNaN(_e4) || function (e, i) {
                  return e < i;
                }(_e4, u)) && this.setFieldInvalid(o, n);
                break;
              }
            case r.CustomRegexp:
              {
                if (void 0 === u) return console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field is not defined. This field will be always invalid.")), void this.setFieldInvalid(o, n);
                var _e5;
                try {
                  _e5 = new RegExp(u);
                } catch (b) {
                  console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] should be a valid regexp. This field will be always invalid.")), this.setFieldInvalid(o, n);
                  break;
                }
                var _i4 = String(h);
                "" === _i4 || _e5.test(_i4) || this.setFieldInvalid(o, n);
                break;
              }
            case r.MinFilesCount:
              if (void 0 === u) {
                console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(o, n);
                break;
              }
              if ("number" != typeof u) {
                console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(o, n);
                break;
              }
              if (Number.isFinite(null == h ? void 0 : h.length) && h.length < u) {
                this.setFieldInvalid(o, n);
                break;
              }
              break;
            case r.MaxFilesCount:
              if (void 0 === u) {
                console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field is not defined. This field will be always invalid.")), this.setFieldInvalid(o, n);
                break;
              }
              if ("number" != typeof u) {
                console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field should be a number. The field will be always invalid.")), this.setFieldInvalid(o, n);
                break;
              }
              if (Number.isFinite(null == h ? void 0 : h.length) && h.length > u) {
                this.setFieldInvalid(o, n);
                break;
              }
              break;
            case r.Files:
              {
                if (void 0 === u) return console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field is not defined. This field will be always invalid.")), void this.setFieldInvalid(o, n);
                if ("object" != _typeof(u)) return console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field should be an object. This field will be always invalid.")), void this.setFieldInvalid(o, n);
                var _e6 = u.files;
                if ("object" != _typeof(_e6)) return console.error("Value for ".concat(n.rule, " rule for [").concat(o, "] field should be an object with files array. This field will be always invalid.")), void this.setFieldInvalid(o, n);
                var _i5 = function _i5(e, i) {
                  var t = Number.isFinite(i.minSize) && e.size < i.minSize,
                    s = Number.isFinite(i.maxSize) && e.size > i.maxSize,
                    l = Array.isArray(i.names) && !i.names.includes(e.name),
                    r = Array.isArray(i.extensions) && !i.extensions.includes(e.name.split(".")[e.name.split(".").length - 1]),
                    o = Array.isArray(i.types) && !i.types.includes(e.type);
                  return t || s || l || r || o;
                };
                if ("object" == _typeof(h) && null !== h) for (var _t4 = 0, _s2 = h.length; _t4 < _s2; ++_t4) {
                  var _s3 = h.item(_t4);
                  if (!_s3) {
                    this.setFieldInvalid(o, n);
                    break;
                  }
                  if (_i5(_s3, _e6)) {
                    this.setFieldInvalid(o, n);
                    break;
                  }
                }
                break;
              }
            default:
              {
                if ("function" != typeof n.validator) return console.error("Validator for custom rule for [".concat(o, "] field should be a function. This field will be always invalid.")), void this.setFieldInvalid(o, n);
                var _e7 = n.validator(h, this.getCompatibleFields());
                if ("boolean" != typeof _e7 && "function" != typeof _e7 && console.error("Validator return value for [".concat(o, "] field should be boolean or function. It will be cast to boolean.")), "function" == typeof _e7) {
                  if (!c) {
                    this.fields[o].asyncCheckPending = !1;
                    var _i6 = _e7();
                    return d(_i6) ? _i6.then(function (e) {
                      e || _this2.setFieldInvalid(o, n);
                    })["catch"](function () {
                      _this2.setFieldInvalid(o, n);
                    }) : (console.error("Validator function for custom rule for [".concat(o, "] field should return a Promise. This field will be always invalid.")), void this.setFieldInvalid(o, n));
                  }
                  this.fields[o].asyncCheckPending = !0;
                }
                _e7 || this.setFieldInvalid(o, n);
              }
          }
          var f;
        }
      }
    }, {
      key: "isFormValid",
      value: function isFormValid() {
        var e = !0;
        for (var _i7 = 0, _t5 = Object.values(this.fields).length; _i7 < _t5; ++_i7) {
          var _t6 = Object.values(this.fields)[_i7];
          if (void 0 === _t6.isValid) {
            e = void 0;
            break;
          }
          if (!1 === _t6.isValid) {
            e = !1;
            break;
          }
        }
        for (var _i8 = 0, _t7 = Object.values(this.groupFields).length; _i8 < _t7; ++_i8) {
          var _t8 = Object.values(this.groupFields)[_i8];
          if (void 0 === _t8.isValid) {
            e = void 0;
            break;
          }
          if (!1 === _t8.isValid) {
            e = !1;
            break;
          }
        }
        return e;
      }
    }, {
      key: "validateField",
      value: function validateField(e) {
        var _this3 = this;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        var t;
        var s = this.fields[e];
        s.isValid = !0;
        var l = [];
        return _toConsumableArray(s.rules).reverse().forEach(function (t) {
          var r = _this3.validateFieldRule(e, s.elem, t, i);
          d(r) && l.push(r);
        }), s.isValid && this.setFieldValid(e, null == (t = s.config) ? void 0 : t.successMessage), Promise.allSettled(l)["finally"](function () {
          var e;
          i && (null == (e = _this3.onValidateCallback) || e.call(_this3, {
            isValid: _this3.isFormValid(),
            isSubmitted: _this3.isSubmitted,
            fields: _this3.getCompatibleFields(),
            groups: _objectSpread({}, _this3.groupFields)
          }));
        });
      }
    }, {
      key: "revalidateField",
      value: function revalidateField(e) {
        var _this4 = this;
        if ("string" != typeof e && !u(e)) throw Error("Field selector is not valid. Please specify a string selector or a valid DOM element.");
        var i = this.getKeyByFieldSelector(e);
        return i && this.fields[i] ? new Promise(function (e) {
          _this4.validateField(i, !0)["finally"](function () {
            _this4.clearFieldStyle(i), _this4.clearFieldLabel(i), _this4.renderFieldError(i, !0), e(!!_this4.fields[i].isValid);
          });
        }) : (console.error("Field not found. Check the field selector."), Promise.reject());
      }
    }, {
      key: "revalidateGroup",
      value: function revalidateGroup(e) {
        var _this5 = this;
        if ("string" != typeof e && !u(e)) throw Error("Group selector is not valid. Please specify a string selector or a valid DOM element.");
        var i = this.getKeyByFieldSelector(e);
        return i && this.groupFields[i] ? new Promise(function (e) {
          _this5.validateGroup(i)["finally"](function () {
            _this5.clearFieldLabel(i), _this5.renderGroupError(i, !0), e(!!_this5.groupFields[i].isValid);
          });
        }) : (console.error("Group not found. Check the group selector."), Promise.reject());
      }
    }, {
      key: "validateGroup",
      value: function validateGroup(e) {
        var _this6 = this;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        var t = this.groupFields[e],
          s = [];
        return _toConsumableArray(t.rules).reverse().forEach(function (i) {
          var l = _this6.validateGroupRule(e, t.elems, i);
          d(l) && s.push(l);
        }), Promise.allSettled(s)["finally"](function () {
          var e;
          i && (null == (e = _this6.onValidateCallback) || e.call(_this6, {
            isValid: _this6.isFormValid(),
            isSubmitted: _this6.isSubmitted,
            fields: _this6.getCompatibleFields(),
            groups: _objectSpread({}, _this6.groupFields)
          }));
        });
      }
    }, {
      key: "focusInvalidField",
      value: function focusInvalidField() {
        var _this7 = this;
        var _loop = function _loop() {
          var i = _this7.fields[_e8];
          if (!i.isValid) {
            setTimeout(function () {
              return i.elem.focus();
            }, 0);
            return "break";
          }
        };
        for (var _e8 in this.fields) {
          var _ret = _loop();
          if (_ret === "break") break;
        }
      }
    }, {
      key: "afterSubmitValidation",
      value: function afterSubmitValidation() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
        this.renderErrors(e), this.globalConfig.focusInvalidField && this.focusInvalidField();
      }
    }, {
      key: "validate",
      value: function validate() {
        var _this8 = this;
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
        return new Promise(function (i) {
          var t = [];
          Object.keys(_this8.fields).forEach(function (e) {
            var i = _this8.validateField(e);
            d(i) && t.push(i);
          }), Object.keys(_this8.groupFields).forEach(function (e) {
            var i = _this8.validateGroup(e);
            d(i) && t.push(i);
          }), Promise.allSettled(t).then(function () {
            var s;
            _this8.afterSubmitValidation(e), null == (s = _this8.onValidateCallback) || s.call(_this8, {
              isValid: _this8.isFormValid(),
              isSubmitted: _this8.isSubmitted,
              fields: _this8.getCompatibleFields(),
              groups: _objectSpread({}, _this8.groupFields)
            }), i(!!t.length);
          });
        });
      }
    }, {
      key: "revalidate",
      value: function revalidate() {
        var _this9 = this;
        return new Promise(function (e) {
          _this9.validateHandler(void 0, !0)["finally"](function () {
            _this9.globalConfig.focusInvalidField && _this9.focusInvalidField(), e(_this9.isValid);
          });
        });
      }
    }, {
      key: "validateHandler",
      value: function validateHandler(e) {
        var _this10 = this;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        return this.globalConfig.lockForm && this.lockForm(), this.validate(i)["finally"](function () {
          var i, t;
          _this10.globalConfig.lockForm && _this10.unlockForm(), _this10.isValid ? null == (i = _this10.onSuccessCallback) || i.call(_this10, e) : null == (t = _this10.onFailCallback) || t.call(_this10, _this10.getCompatibleFields(), _this10.groupFields);
        });
      }
    }, {
      key: "setForm",
      value: function setForm(e) {
        this.form = e, this.form.setAttribute("novalidate", "novalidate"), this.removeListener("submit", this.form, this.formSubmitHandler), this.addListener("submit", this.form, this.formSubmitHandler);
      }
    }, {
      key: "addListener",
      value: function addListener(e, i, t) {
        i.addEventListener(e, t), this.eventListeners.push({
          type: e,
          elem: i,
          func: t
        });
      }
    }, {
      key: "removeListener",
      value: function removeListener(e, i, t) {
        i.removeEventListener(e, t), this.eventListeners = this.eventListeners.filter(function (t) {
          return t.type !== e || t.elem !== i;
        });
      }
    }, {
      key: "addField",
      value: function addField(e, i, t) {
        if ("string" != typeof e && !u(e)) throw Error("Field selector is not valid. Please specify a string selector or a valid DOM element.");
        var s;
        if (s = "string" == typeof e ? this.form.querySelector(e) : e, !s) throw Error("Field doesn't exist in the DOM! Please check the field selector.");
        if (!Array.isArray(i) || !i.length) throw Error("Rules argument should be an array and should contain at least 1 element.");
        i.forEach(function (e) {
          if (!("rule" in e || "validator" in e || "plugin" in e)) throw Error("Rules argument must contain at least one rule or validator property.");
          if (!(e.validator || e.plugin || e.rule && Object.values(r).includes(e.rule))) throw Error("Rule should be one of these types: ".concat(Object.values(r).join(", "), ". Provided value: ").concat(e.rule));
        });
        var l = this.setKeyByFieldSelector(e);
        return this.fields[l] = {
          elem: s,
          rules: i,
          isValid: void 0,
          touched: !1,
          config: t
        }, this.setListeners(s), (this.isSubmitted || this.globalConfig.validateBeforeSubmitting) && this.validateField(l), this;
      }
    }, {
      key: "removeField",
      value: function removeField(e) {
        if ("string" != typeof e && !u(e)) throw Error("Field selector is not valid. Please specify a string selector or a valid DOM element.");
        var i = this.getKeyByFieldSelector(e);
        if (!i || !this.fields[i]) return console.error("Field not found. Check the field selector."), this;
        var t = this.getListenerType(this.fields[i].elem.type);
        return this.removeListener(t, this.fields[i].elem, this.handlerChange), this.clearErrors(), delete this.fields[i], this;
      }
    }, {
      key: "removeGroup",
      value: function removeGroup(e) {
        var _this11 = this;
        if ("string" != typeof e) throw Error("Group selector is not valid. Please specify a string selector.");
        var i = this.getKeyByFieldSelector(e);
        return i && this.groupFields[i] ? (this.groupFields[i].elems.forEach(function (e) {
          var i = _this11.getListenerType(e.type);
          _this11.removeListener(i, e, _this11.handlerChange);
        }), this.clearErrors(), delete this.groupFields[i], this) : (console.error("Group not found. Check the group selector."), this);
      }
    }, {
      key: "addRequiredGroup",
      value: function addRequiredGroup(e, i, t, s) {
        var _this12 = this;
        if ("string" != typeof e && !u(e)) throw Error("Group selector is not valid. Please specify a string selector or a valid DOM element.");
        var l;
        if (l = "string" == typeof e ? this.form.querySelector(e) : e, !l) throw Error("Group selector not found! Please check the group selector.");
        var r = l.querySelectorAll("input"),
          a = Array.from(r).filter(function (e) {
            var i = function (e, i) {
              var t = _toConsumableArray(i).reverse();
              for (var _s4 = 0, _l = t.length; _s4 < _l; ++_s4) {
                var _i9 = t[_s4];
                for (var _t9 in e) {
                  var _s5 = e[_t9];
                  if (_s5.groupElem === _i9) return [_t9, _s5];
                }
              }
              return null;
            }(_this12.groupFields, function (e) {
              var i = e;
              var t = [];
              for (; i;) t.unshift(i), i = i.parentNode;
              return t;
            }(e));
            return !i || i[1].elems.find(function (i) {
              return i !== e;
            });
          }),
          n = this.setKeyByFieldSelector(e);
        return this.groupFields[n] = {
          rules: [{
            rule: o.Required,
            errorMessage: i,
            successMessage: s
          }],
          groupElem: l,
          elems: a,
          touched: !1,
          isValid: void 0,
          config: t
        }, r.forEach(function (e) {
          _this12.setListeners(e);
        }), this;
      }
    }, {
      key: "getListenerType",
      value: function getListenerType(e) {
        switch (e) {
          case "checkbox":
          case "select-one":
          case "file":
          case "radio":
            return "change";
          default:
            return "input";
        }
      }
    }, {
      key: "setListeners",
      value: function setListeners(e) {
        var i = this.getListenerType(e.type);
        this.removeListener(i, e, this.handlerChange), this.addListener(i, e, this.handlerChange);
      }
    }, {
      key: "clearFieldLabel",
      value: function clearFieldLabel(e) {
        var i, t;
        null == (i = this.errorLabels[e]) || i.remove(), null == (t = this.successLabels[e]) || t.remove();
      }
    }, {
      key: "clearFieldStyle",
      value: function clearFieldStyle(e) {
        var _r$elem$classList;
        var i, t, s, l;
        var r = this.fields[e],
          o = (null == (i = r.config) ? void 0 : i.errorFieldStyle) || this.globalConfig.errorFieldStyle;
        Object.keys(o).forEach(function (e) {
          r.elem.style[e] = "";
        });
        var a = (null == (t = r.config) ? void 0 : t.successFieldStyle) || this.globalConfig.successFieldStyle || {};
        Object.keys(a).forEach(function (e) {
          r.elem.style[e] = "";
        }), (_r$elem$classList = r.elem.classList).remove.apply(_r$elem$classList, _toConsumableArray(c((null == (s = r.config) ? void 0 : s.errorFieldCssClass) || this.globalConfig.errorFieldCssClass)).concat(_toConsumableArray(c((null == (l = r.config) ? void 0 : l.successFieldCssClass) || this.globalConfig.successFieldCssClass))));
      }
    }, {
      key: "clearErrors",
      value: function clearErrors() {
        var _this13 = this;
        var e, i;
        Object.keys(this.errorLabels).forEach(function (e) {
          return _this13.errorLabels[e].remove();
        }), Object.keys(this.successLabels).forEach(function (e) {
          return _this13.successLabels[e].remove();
        });
        for (var _t10 in this.fields) this.clearFieldStyle(_t10);
        var _loop2 = function _loop2() {
          var s = _this13.groupFields[_t11],
            l = (null == (e = s.config) ? void 0 : e.errorFieldStyle) || _this13.globalConfig.errorFieldStyle;
          Object.keys(l).forEach(function (e) {
            s.elems.forEach(function (i) {
              var _i$classList;
              var t;
              i.style[e] = "", (_i$classList = i.classList).remove.apply(_i$classList, _toConsumableArray(c((null == (t = s.config) ? void 0 : t.errorFieldCssClass) || _this13.globalConfig.errorFieldCssClass)));
            });
          });
          var r = (null == (i = s.config) ? void 0 : i.successFieldStyle) || _this13.globalConfig.successFieldStyle || {};
          Object.keys(r).forEach(function (e) {
            s.elems.forEach(function (i) {
              var _i$classList2;
              var t;
              i.style[e] = "", (_i$classList2 = i.classList).remove.apply(_i$classList2, _toConsumableArray(c((null == (t = s.config) ? void 0 : t.successFieldCssClass) || _this13.globalConfig.successFieldCssClass)));
            });
          });
        };
        for (var _t11 in this.groupFields) {
          _loop2();
        }
        this.tooltips = [];
      }
    }, {
      key: "isTooltip",
      value: function isTooltip() {
        return !!this.globalConfig.tooltip;
      }
    }, {
      key: "lockForm",
      value: function lockForm() {
        var e = this.form.querySelectorAll("input, textarea, button, select");
        for (var _i10 = 0, _t12 = e.length; _i10 < _t12; ++_i10) e[_i10].setAttribute("data-just-validate-fallback-disabled", e[_i10].disabled ? "true" : "false"), e[_i10].setAttribute("disabled", "disabled"), e[_i10].style.pointerEvents = "none", e[_i10].style.webkitFilter = "grayscale(100%)", e[_i10].style.filter = "grayscale(100%)";
      }
    }, {
      key: "unlockForm",
      value: function unlockForm() {
        var e = this.form.querySelectorAll("input, textarea, button, select");
        for (var _i11 = 0, _t13 = e.length; _i11 < _t13; ++_i11) "true" !== e[_i11].getAttribute("data-just-validate-fallback-disabled") && e[_i11].removeAttribute("disabled"), e[_i11].style.pointerEvents = "", e[_i11].style.webkitFilter = "", e[_i11].style.filter = "";
      }
    }, {
      key: "renderTooltip",
      value: function renderTooltip(e, i, t) {
        var _this14 = this;
        var s;
        var _e$getBoundingClientR = e.getBoundingClientRect(),
          l = _e$getBoundingClientR.top,
          r = _e$getBoundingClientR.left,
          o = _e$getBoundingClientR.width,
          a = _e$getBoundingClientR.height,
          n = i.getBoundingClientRect(),
          d = t || (null == (s = this.globalConfig.tooltip) ? void 0 : s.position);
        switch (d) {
          case "left":
            i.style.top = l + a / 2 - n.height / 2 + "px", i.style.left = r - n.width - 5 + "px";
            break;
          case "top":
            i.style.top = l - n.height - 5 + "px", i.style.left = r + o / 2 - n.width / 2 + "px";
            break;
          case "right":
            i.style.top = l + a / 2 - n.height / 2 + "px", i.style.left = "".concat(r + o + 5, "px");
            break;
          case "bottom":
            i.style.top = "".concat(l + a + 5, "px"), i.style.left = r + o / 2 - n.width / 2 + "px";
        }
        i.dataset.direction = d;
        return {
          refresh: function refresh() {
            _this14.renderTooltip(e, i, t);
          }
        };
      }
    }, {
      key: "createErrorLabelElem",
      value: function createErrorLabelElem(e, i, t) {
        var _s$classList;
        var s = document.createElement("div");
        s.innerHTML = i;
        var l = this.isTooltip() ? null == t ? void 0 : t.errorLabelStyle : (null == t ? void 0 : t.errorLabelStyle) || this.globalConfig.errorLabelStyle;
        return Object.assign(s.style, l), (_s$classList = s.classList).add.apply(_s$classList, _toConsumableArray(c((null == t ? void 0 : t.errorLabelCssClass) || this.globalConfig.errorLabelCssClass)).concat(["just-validate-error-label"])), this.isTooltip() && (s.dataset.tooltip = "true"), this.globalConfig.testingMode && (s.dataset.testId = "error-label-".concat(e)), this.errorLabels[e] = s, s;
      }
    }, {
      key: "createSuccessLabelElem",
      value: function createSuccessLabelElem(e, i, t) {
        var _s$classList2;
        if (void 0 === i) return null;
        var s = document.createElement("div");
        s.innerHTML = i;
        var l = (null == t ? void 0 : t.successLabelStyle) || this.globalConfig.successLabelStyle;
        return Object.assign(s.style, l), (_s$classList2 = s.classList).add.apply(_s$classList2, _toConsumableArray(c((null == t ? void 0 : t.successLabelCssClass) || this.globalConfig.successLabelCssClass)).concat(["just-validate-success-label"])), this.globalConfig.testingMode && (s.dataset.testId = "success-label-".concat(e)), this.successLabels[e] = s, s;
      }
    }, {
      key: "renderErrorsContainer",
      value: function renderErrorsContainer(e, i) {
        var t = i || this.globalConfig.errorsContainer;
        if ("string" == typeof t) {
          var _i12 = this.form.querySelector(t);
          if (_i12) return _i12.appendChild(e), !0;
          console.error("Error container with ".concat(t, " selector not found. Errors will be rendered as usual"));
        }
        return t instanceof Element ? (t.appendChild(e), !0) : (void 0 !== t && console.error("Error container not found. It should be a string or existing Element. Errors will be rendered as usual"), !1);
      }
    }, {
      key: "renderGroupLabel",
      value: function renderGroupLabel(e, i, t, s) {
        if (!s) {
          if (this.renderErrorsContainer(i, t)) return;
        }
        e.appendChild(i);
      }
    }, {
      key: "renderFieldLabel",
      value: function renderFieldLabel(e, i, t, s) {
        var l, r, o, a, n, d, c;
        if (!s) {
          if (this.renderErrorsContainer(i, t)) return;
        }
        if ("checkbox" === e.type || "radio" === e.type) {
          var _t14 = document.querySelector("label[for=\"".concat(e.getAttribute("id"), "\"]"));
          "label" === (null == (r = null == (l = e.parentElement) ? void 0 : l.tagName) ? void 0 : r.toLowerCase()) ? null == (a = null == (o = e.parentElement) ? void 0 : o.parentElement) || a.appendChild(i) : _t14 ? null == (n = _t14.parentElement) || n.appendChild(i) : null == (d = e.parentElement) || d.appendChild(i);
        } else null == (c = e.parentElement) || c.appendChild(i);
      }
    }, {
      key: "showLabels",
      value: function showLabels(e, i) {
        var _this15 = this;
        Object.keys(e).forEach(function (t, s) {
          var l = e[t],
            r = _this15.getKeyByFieldSelector(t);
          if (!r || !_this15.fields[r]) return void console.error("Field not found. Check the field selector.");
          var o = _this15.fields[r];
          o.isValid = !i, _this15.clearFieldStyle(r), _this15.clearFieldLabel(r), _this15.renderFieldError(r, !1, l), 0 === s && _this15.globalConfig.focusInvalidField && setTimeout(function () {
            return o.elem.focus();
          }, 0);
        });
      }
    }, {
      key: "showErrors",
      value: function showErrors(e) {
        if ("object" != _typeof(e)) throw Error("[showErrors]: Errors should be an object with key: value format");
        this.showLabels(e, !0);
      }
    }, {
      key: "showSuccessLabels",
      value: function showSuccessLabels(e) {
        if ("object" != _typeof(e)) throw Error("[showSuccessLabels]: Labels should be an object with key: value format");
        this.showLabels(e, !1);
      }
    }, {
      key: "renderFieldError",
      value: function renderFieldError(e) {
        var _d$elem$classList2;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;
        var t = arguments.length > 2 ? arguments[2] : undefined;
        var s, l, r, o, a, n;
        var d = this.fields[e];
        if (!1 === d.isValid && (this.isValid = !1), void 0 === d.isValid || !i && !this.isSubmitted && !d.touched && void 0 === t) return;
        if (d.isValid) {
          if (!d.asyncCheckPending) {
            var _d$elem$classList;
            var _i13 = this.createSuccessLabelElem(e, void 0 !== t ? t : d.successMessage, d.config);
            _i13 && this.renderFieldLabel(d.elem, _i13, null == (s = d.config) ? void 0 : s.errorsContainer, !0), (_d$elem$classList = d.elem.classList).add.apply(_d$elem$classList, _toConsumableArray(c((null == (l = d.config) ? void 0 : l.successFieldCssClass) || this.globalConfig.successFieldCssClass)));
          }
          return;
        }
        (_d$elem$classList2 = d.elem.classList).add.apply(_d$elem$classList2, _toConsumableArray(c((null == (r = d.config) ? void 0 : r.errorFieldCssClass) || this.globalConfig.errorFieldCssClass)));
        var u = this.createErrorLabelElem(e, void 0 !== t ? t : d.errorMessage, d.config);
        this.renderFieldLabel(d.elem, u, null == (o = d.config) ? void 0 : o.errorsContainer), this.isTooltip() && this.tooltips.push(this.renderTooltip(d.elem, u, null == (n = null == (a = d.config) ? void 0 : a.tooltip) ? void 0 : n.position));
      }
    }, {
      key: "renderGroupError",
      value: function renderGroupError(e) {
        var _this16 = this;
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;
        var t, s, l, r;
        var o = this.groupFields[e];
        if (!1 === o.isValid && (this.isValid = !1), void 0 === o.isValid || !i && !this.isSubmitted && !o.touched) return;
        if (o.isValid) {
          o.elems.forEach(function (e) {
            var _e$classList;
            var i, t;
            Object.assign(e.style, (null == (i = o.config) ? void 0 : i.successFieldStyle) || _this16.globalConfig.successFieldStyle), (_e$classList = e.classList).add.apply(_e$classList, _toConsumableArray(c((null == (t = o.config) ? void 0 : t.successFieldCssClass) || _this16.globalConfig.successFieldCssClass)));
          });
          var _i14 = this.createSuccessLabelElem(e, o.successMessage, o.config);
          return void (_i14 && this.renderGroupLabel(o.groupElem, _i14, null == (t = o.config) ? void 0 : t.errorsContainer, !0));
        }
        this.isValid = !1, o.elems.forEach(function (e) {
          var _e$classList2;
          var i, t;
          Object.assign(e.style, (null == (i = o.config) ? void 0 : i.errorFieldStyle) || _this16.globalConfig.errorFieldStyle), (_e$classList2 = e.classList).add.apply(_e$classList2, _toConsumableArray(c((null == (t = o.config) ? void 0 : t.errorFieldCssClass) || _this16.globalConfig.errorFieldCssClass)));
        });
        var a = this.createErrorLabelElem(e, o.errorMessage, o.config);
        this.renderGroupLabel(o.groupElem, a, null == (s = o.config) ? void 0 : s.errorsContainer), this.isTooltip() && this.tooltips.push(this.renderTooltip(o.groupElem, a, null == (r = null == (l = o.config) ? void 0 : l.tooltip) ? void 0 : r.position));
      }
    }, {
      key: "renderErrors",
      value: function renderErrors() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
        if (this.isSubmitted || e || this.globalConfig.validateBeforeSubmitting) {
          this.clearErrors(), this.isValid = !0;
          for (var _e9 in this.groupFields) this.renderGroupError(_e9);
          for (var _e10 in this.fields) this.renderFieldError(_e10);
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _this17 = this;
        this.eventListeners.forEach(function (e) {
          _this17.removeListener(e.type, e.elem, e.func);
        }), Object.keys(this.customStyleTags).forEach(function (e) {
          _this17.customStyleTags[e].remove();
        }), this.clearErrors(), this.globalConfig.lockForm && this.unlockForm();
      }
    }, {
      key: "refresh",
      value: function refresh() {
        var _this18 = this;
        this.destroy(), this.form ? (this.initialize(this.form, this.globalConfig), Object.keys(this.fields).forEach(function (e) {
          var i = _this18.getFieldSelectorByKey(e);
          i && _this18.addField(i, _toConsumableArray(_this18.fields[e].rules), _this18.fields[e].config);
        })) : console.error("Cannot initialize the library! Form is not defined");
      }
    }, {
      key: "setCurrentLocale",
      value: function setCurrentLocale(e) {
        "string" == typeof e || void 0 === e ? (this.currentLocale = e, this.isSubmitted && this.validate()) : console.error("Current locale should be a string");
      }
    }, {
      key: "onSuccess",
      value: function onSuccess(e) {
        return this.onSuccessCallback = e, this;
      }
    }, {
      key: "onFail",
      value: function onFail(e) {
        return this.onFailCallback = e, this;
      }
    }, {
      key: "onValidate",
      value: function onValidate(e) {
        return this.onValidateCallback = e, this;
      }
    }]);
    return _class;
  }();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
